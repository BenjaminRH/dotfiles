" Set up Vundle
set nocompatible               " be iMproved
filetype off                   " required!


call pathogen#infect()

" Set smart indenting
filetype plugin indent on

" Reload this file every time I save it
augroup myvimrchooks
    au!
    autocmd bufwritepost .vimrc source ~/.vimrc
augroup END

""""""""""""""""""""""""""""""
"" My actual config
""""""""""""""""""""""""""""""

" Change leader key to something less stupid
let mapleader=","



""""""""""""""""""""""""""""""
"" How it looks
""""""""""""""""""""""""""""""

" Big font size
set guifont=Bitstream\ Vera\ Sans\ Mono:h18

" Solarized colours
syntax enable
set background=dark
colorscheme solarized



""""""""""""""""""""""""""""""
"" Mappings
""""""""""""""""""""""""""""""
" Map ; to :
nnoremap ; :

" Remap jj to <Esc>
:imap jj <Esc>

" Disable arrow keys 
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"""""""""""""""""""""""""
"" Helpful functions
"""""""""""""""""""""""""

" Set working dir to git root
function! SetGitDir()
    " Change working dir to the current file
    cd %:p:h
    " Set 'gitdir' to be the folder containing .git
    let gitdir=system("git rev-parse --show-toplevel")
    " See if the command output starts with 'fatal' (if it does, not in a git repo)
    let isnotgitdir=matchstr(gitdir, '^fatal:.*')
    " If it empty, there was no error. Let's cd
    if empty(isnotgitdir)
        cd `=gitdir`
    endif
endfunction

" Get the current working dir, nicely formatted
function! CWD()
    let curdir = substitute(getcwd(), '/Users/michael', "~", "g")
    let curdir = substitute(curdir, '/home/michael', "~", "g")
    return curdir
endfunction

"""""""""""""""""""""""""
"" Set various options
"""""""""""""""""""""""""

" hidden - http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden

" Tabs = 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

" Case insensitive searching, unless it contains a capital
set ignorecase smartcase

" Show current line
set cursorline

" Enable file completing a la ZSH when using tab to complete file names
" aka: Complete to the longest common substring then cycle through
set wildmode=longest,full
" Ignore some file types when completing
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=*.zip,*.rar                      " Ignore archive files

" Enable find-as-you-type searching
set incsearch
" Highlight all matches
set hlsearch
" Disable search highlight on <leader><space>
nnoremap <leader><space> :nohlsearch<cr>

" Keep the current line centered constantly
set scrolloff=999
" Toggle 'keep current line in the center of the screen' mode
nnoremap <leader>C :let &scrolloff=999-&scrolloff<cr>

" Remove intro message
set shortmess=atI

" Always show a ruler
set ruler

" Copy/Paste to and from Desktop Environment
noremap <leader>yy "+y
noremap <leader>pp "+gP

" Set working directory (usually for ctags)
nnoremap <leader>. :call SetGitDir()<CR>

" Time to set up a command line that's useful
" Set it's height to 2
set cmdheight=2
" Always show
set laststatus=2
" Show the current line+column, then current working dir, then current file.
" Then show if it's read only, then if it's a help pane, then if it's a
" preview window. Next, show git status with fugitive, then any syntax errors
" with Syntastic
set statusline=[%l,%v][CWD:\ %{CWD()}][FILE:\ %f]\ %r%h%w\ %{fugitive#statusline()}\ %#warningmsg#%{SyntasticStatuslineFlag()}%*
" Show command info, e.g. {lines}x{columns} when in visual
set showcmd
" Show what mode we're in too
set showmode

" When opening a file, change the current working dir to git root
autocmd BufEnter * :call SetGitDir()

" Show trailing whitespace
set list listchars=tab:»·,trail:·

" In visual block mode, make tab/shift-tab indent/outdent
vmap <Tab> >
vmap <S-Tab> <

" Make commands time out after 300ms so I can type jj
set timeoutlen=300

" Jump to first char with 0, and beginning of line with ^
nnoremap 0 ^
nnoremap ^ 0

" gj/gk treat wrapped lines as separate
" (i.e. you can move up/down in one wrapped line)
" I like that behavior better, so I inverted the keys.
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Make Y behave like D and C, go from cursor to end
nnoremap Y y$

" Switch tabs with ctrl-tab and ctrl-shift-tab like most browsers
map <C-Tab> gt
map <C-S-Tab> gT

" Nicer split resizing with alt+left/right
map <silent><m-Left> :vertical resize -5<cr>
map <silent><m-Right> :vertical resize +5<cr>

" Don't deselect when using tab/shift-tab in visual mode
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Some general formatting options
set formatoptions=
set formatoptions+=c " Format comments
set formatoptions+=r " Continue comments by default
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=n " Recognize numbered lists
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=1 " Break before 1-letter words

" New splits go below and to the right
set splitbelow
set splitright

""""""""""""""""""""""""""""""
"" Plugin settings
""""""""""""""""""""""""""""""
" Ignore vendor (composer), node_modules (npm) and any VCS folders.
" Don't forget to run :ClearAllCtrlPCaches when changing this
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](vendor|node_modules|\.(git|hg|svn))$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

""""""""""""""""""""""""""""""
"" Plugin mappings
""""""""""""""""""""""""""""""

" Map NERDTree to ,d
nnoremap <leader>d :NERDTreeToggle<cr>

" Map LustyJuggler to ,b
nnoremap <leader>b :LustyJuggler<cr>

" Map tagbar to ,l
nnoremap <leader>l :TagbarToggle<CR>

" Fugitive mappings
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
